/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file     cmost.seq
 * @brief    sequence file for CMOS imager 4k x 2k
 * @author   Stephen Kaye and Timothee Greffe
 * @date     2020-01-08 Initial creation
 * @modified 
 *
 */

/** ---------------------------------------------------------------------------
 * parameter definitions
 * syntax: param paramname=value
*/
param Start=0
param exptime=0 
param Expose=0
param InitFrame=1
param mode_RR=1
param mode_RRHDR=0
param mode_Guiding=0
param RowGuiding=10
param BOI_start=200
param guiding_period = 100 /*in ms */ 
param Abort=0
param DarkRows=_DARK_ROWS
param MaxRows=_MAX_ROWS
param GainLow=0
param GainHigh=1
param numsamples=_NUM_CDS_SAMPLES
param NbPixel=256
param NbPixelb=0
param TPixel_hold=138 /* 138 for 700kHz pixel - t_settle = 0  */
param longexposure=0
param LPa=3 /* frame n for which the pulse happens*/
param LPb=1
param LEDPulseWidth = 1 /* in ms */
param ShutterEnable = 1
param t_settle = 0   /* 262 for 250kHz pixel - TPixel_hold=138 */
param prv_ghostframe = 0
param RST_delay = 10 /* in us */
param TG_delay  = 10 /* in us */
param MIM_delay = 10 /* in us */

/* There are 4 parallel outputs per 1024 pixel block.  The x address       */
/* increases to 256 and then resets, this should cover all of the columns. */


/** ---------------------------------------------------------------------------
 * @fn     SetupCmos
 * @brief  This executes on start-up and sets levels to initialize CMOS array.
 *
 */
SEQUENCE SetupCmos {
  AllLow(); /*That should happen before the VDDEN goes high and clocks are effectively going to the detector */
  if Start GOTO Initialization();
  GOTO SetupCmos();
}

SEQUENCE Initialization {
GlobalReset();
GOTO WaitForExpose();
}


/* And we'll fall into the wait for exposure routine                      */
/* We will be doing a rolling shutter */


/** ---------------------------------------------------------------------------
 * @fn	    WaitForExposure
 * @brief   Here we wait until the host asks for an image
 */

SEQUENCE WaitForExpose {
  if Expose GOTO SelectReadoutMode();
  /* GlobalReset();*//* Apply Global Reset to the Array */          
  GOTO WaitForExpose();
}

SEQUENCE SelectReadoutMode {
  if InitFrame    InitFrame_seq();
  if mode_RR      RR_seq(Expose);
  if mode_RRHDR   RRHDR_seq(Expose);
  if mode_Guiding GuidingReadout(Expose);
  ResetExpose(1000); 
  GOTO WaitForExpose(); 
}

/** ---------------------------------------------------------------------------
 * @fn	    Rolling Reset
 * @brief   A first ghost frame is readout to start the sequence in the correct rolling reset state
 */
SEQUENCE InitFrame_seq {
/*  wLowSnapClock();*/ /* to address only one row at a time */
/*  wLowRSTMIMClock();*/
 /* GlobalReset();*/
  prv_ghostframe++;
if mode_RR  RR_dCDS_Readout(); /*Reads the first frame but do no save it*/
if mode_RRHDR RR_dCDS_Readout_HDR(); /*Reads the first frame but do not save it */
  prv_ghostframe--;
return;
}
 
SEQUENCE RR_seq {
  if longexposure LowGlowExposure();
  if !longexposure Sec(exptime);

  /* Science Frame starts here */
  RR_dCDS_Readout();
return;
 }
 
SEQUENCE LowGlowExposure {
  /* SetBiasesOff(); */
  /* wSetLoGlo(); */

  /* wPulseYAddr(512) */ /* Pulse Y ADDR to rest row address pointer on specific row */
  
  /* wResetXYAddr(); */
  /* wDelay1us(1); */
  /* wPulseYAddr();*/  


  Sec(exptime);
  /* SetBiasesOn();  */
  /* wUnSetLoGlo();  */
  /* Sec(5);         */    
  return;
}


SEQUENCE GuidingReadout { /* RR dCDS */
  Expose--;
  wDelay1ms(exptime); /* Guiding Period in ms */
  wFrame();
  wResetXYAddr();/* Reset the X and Y addresses  */
  wDelay1us(1);
  wPulseYAddr(); wDelay1us(5);
  /*wResetVGuiding();*/ /* Go to Fixed Guiding window*/
  /*wResetHGuiding();*/
  wPulseYAddr(BOI_start);
  ReadRowRR(RowGuiding);  /*Readsout N rows*/
  if Abort GOTO AbortSequence();
  return;
}

SEQUENCE AbortSequence {
  Abort--;
  ResetExpose(10000);
  GOTO WaitForExpose();
}

SEQUENCE ResetExpose {
  Expose--;
  return;
}

SEQUENCE RR_dCDS_Readout {
  wFrame(); /*Do not save first image in frame buffer*/
  /* Now read the active pixels */
  wResetXYAddr(); /* Reset the X and Y addresses  */
  wDelay1us(1);
  wPulseYAddr(); 
  wDelay1us(5);
  ReadRowRR(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */ 
 return;
 }
 
 
SEQUENCE ReadRowRR{
  wLine();                   /* Trigger a new line */

  wSetRowClock();            /* Sets row clock - buffered sense node voltage driven on to column bus   */
  wDelay10ns(50);
                    
  if GainHigh ResetRowHGandClamp(); /* This resets the row's sense node and sets to high gain mode, 1us width */
  if GainLow  ResetRowLGandClamp(); /* This resets the row's sense node and sets to low gain mode, 1us width  */

  /* Read Reference reset level */
  ReadPixRaw(256);

  /* Pulse the transfer gate to move charge to sense node, 1us wide */
  wTGPulse_RR(); 
  wDelay1us(TG_delay);
  
  /* Reads the Signal Level */
  ReadPixRaw(256);
  
  /* RollingReset(); */ /*Reset the PPD*/ /* Candidate for causing different behaviour between low/high gain and HDR modes */
  wLowRowClock(); 
 
  /* The FPGA will need to handle the roll over and enable the next Y Block */
  wPulseYAddr();    /* FPGA controls DV_IN[], Y_ENABLE_BLOCK[], and Y_LATCH through counter/FPGA    */
  wDelay1us();      /* Delay between Y Latch and the reset of the first pixel which happens on next iteration */
  return;
 }
 
 
 /** ---------------------------------------------------------------------------
 * @fn	    Rolling Reset HDR with Dual readout
 * @brief   A first ghost frame is readout to start the sequence in the correct rolling reset state
 */
 
 SEQUENCE RRHDR_seq {
  if longexposure LowGlowExposure();
  if !longexposure MilliSec(exptime);
  /* Science Frame starts here */
  RR_dCDS_Readout_HDR();
  return;
 }
 

SEQUENCE RR_dCDS_Readout_HDR {
  if !prv_ghostframe wFrame();
  /* Now read the active pixels */
  wResetXYAddr();/* Reset the X and Y addresses  */
  wDelay1us(1);
  wPulseYAddr();wDelay1us(5);
  ReadRowRR_HDR(MaxRows);  /* Go through all the rows, each raw output has 256 columns associated */ 
  return;
 }
 
 
 SEQUENCE ReadRowRR_HDR{
 if !prv_ghostframe  wLine();                   /* Trigger a new line */

  wSetRowClock();            /* Sets row clock - buffered sense node voltage driven on to column bus   */
  wDelay10ns(50);
                    
  ResetRowLGandClamp();   /* This resets the row's sense node and sets to low gain mode, 1us width */
                          /* Ends with RST_delay */
  ReadPixRaw_Reset(256);  /* Read Reference reset level in Low gain mode */
  
  wLowMIMClock();         /* Switch to High gain mode */
  wDelay1us(MIM_delay);   
  ReadPixRaw_Reset(256);  /* Read Reference reset level in High gain mode */ 
  
  wTGPulse_RR();          /* Pulse the transfer gate to move charge to sense node, TG_delay wide */
  wDelay1us(TG_delay);
  ReadPixRaw(256);        /* Reads the Signal Level in High Gain Mode*/
  
  wSetMIMClock();
  wTGPulse_RR();          /*  Push the charges again; TG_delay wide */
  wDelay1us(TG_delay);
  ReadPixRaw(256);        /* Reads the Signal Level in Low Gain Mode */
  
  wLowRowClock(); 
  
  /* The FPGA will need to handle the roll over and enable the next Y Block */
  wPulseYAddr();    /* FPGA controls DV_IN[], Y_ENABLE_BLOCK[], and Y_LATCH through counter/FPGA    */
  wDelay1us();      /* Delay between Y Latch and the reset of the first pixel which happens on next iteration */
  return;
 }
 

SEQUENCE ReadPixRaw {
  wPulseXAddr();
  wDelay10ns(t_settle);
  /* wDelay1ms(t_settle); */
if !prv_ghostframe  wPixel();
  wDelay10ns(TPixel_hold);
  return;
}

SEQUENCE ReadPixRaw_Reset {
  wPulseXAddr();
  wPixel();
  wDelay10ns(TPixel_hold);
  return;
}

SEQUENCE ReadPixRawRL {
  wPixel();
  wPulseXAddr();
  wDelay10ns(10);
  return;
}
SEQUENCE ReadPixRawRH {
  wPixel();
  wPulseXAddr();
  wDelay10ns(86);
  return;
}
SEQUENCE ReadPixRawLH {
  wPixel();
  wPulseXAddr();
  wDelay10ns(86);
  return;
}
SEQUENCE ReadPixRawLL {
  wPixel();
  wPulseXAddr();
  wDelay10ns(10);
  return;
}
SEQUENCE ReadPixRaw_Blank {
  wPulseXAddr();
  wDelay10ns(TPixel_hold);
  return;
}

SEQUENCE ResetRowHGandClamp {
  /* Set Reset clock and MIM clock to reset the sense node */
  /* Then the Reset clock goes low and MIM goes low for high gain */ 
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(4); /* Pulse width on Reset clock is 2us nominal */
      ADClamp();        /* Do a clamp for each line */
      wDelay1us(2);     /* Hold for 2 us */
      ADClamp_();       /* Unclamp the ADCs */
  wLowResetClock();
  wLowMIMClock();
  wDelay1us(RST_delay); /* Settling time from any reset effects */
  return;
}

SEQUENCE ResetRowLGandClamp {
  /* Set Reset clock and MIM clock to reset the sense node */
  /* Then the Reset clock goes low and MIM remains high for low gain */ 
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(4);  /* Pulse width on Reset clock is 2us nominal */
       ADClamp();     /* Do a clamp for each line */
       wDelay1us(2); /* Hold for 2 us */
       ADClamp_();    /* Unclamp the ADCs         */
  wLowResetClock();
  wDelay1us(RST_delay);
  return;
}

SEQUENCE GlobalReset {
  wSetSnapClock(); /* TG, MIM and RST apply to all the rows now */
  wSetTGClock();
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(10);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowTGClock();
  wDelay1us(1); 
  wLowResetClock();
  wLowMIMClock();
  wLowSnapClock();
  wDelay1us(1);
  return;
}
SEQUENCE GlobalSNReset {
  wSetSnapClock(); /* TG, MIM and RST apply to all the rows now */
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(10);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowResetClock();
  wLowMIMClock();
  wLowSnapClock();
  wDelay1us(1);
  return;
}

SEQUENCE GlobalTransfer {
  wSetSnapClock(); /* TG, MIM and RST apply to all the rows now */
  if GainLow wSetMIMClock();
  if GainHigh wLowMIMClock();
  wSetTGClock();
  wDelay1us(10);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowTGClock();
  wLowSnapClock();
  wDelay1us(10);
  return;
}

SEQUENCE RollingReset {
  wSetTGClock();
  wSetResetClock();
  wSetMIMClock();
  wDelay1us(1);      /* Time for TG pulse to propagate, can probably reduce to ~500ns */
  wLowResetClock();
  wLowTGClock();
  wLowMIMClock();
  wDelay1us(4);
return;
}

SEQUENCE ArchonClamp {
  wDelay1us();  
  ADClamp();     
  wDelay1us(5); 
  ADClamp_();
  wDelay1us(5); 
  return;
}

SEQUENCE MilliSec {
  wDelay1ms();
  return;
}
SEQUENCE Sec {
  MilliSec(1000);	
  return;
}


SEQUENCE AllLow {
  wUnSetLoGlo();
  wResetHGuiding(); 
  wResetVGuiding();
  wLowMIMClock();
  wLowTGClock();
  wLowResetClock();
  wLowRowClock();
  wLowSnapClock();
  wLowClampClock();
  wLowXLatch();
  wLowYLatch();
  wLowDarkPixEn();
  return;
}

SEQUENCE LightPulse {
  if LPb CounterLightPulseDuration();
  LPb--;
  wbLightPulse();
  return;
}

SEQUENCE CounterLightPulseDuration {
  wLightPulse();
  Sec(LEDPulseWidth);
  return;
}
